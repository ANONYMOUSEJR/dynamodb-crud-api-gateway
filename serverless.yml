service: dev-anon-dynamodb-crud-api
# API KEY FOR CONVERSION: 613501719a-93e03da33c-rz4b6y


provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1

  environment:
    DYNAMO_TABLE_NAME: ${self:custom.ProductstableName}

custom:
  ProductsTableName: goods-table-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function

functions:

  getProduct:
    handler: api.getProduct
    name: anon-get-product
    memorySize: 128 # mb
    timeout: 5 # sec
    events: 
      - http:
        path: anon-product/{productId}
        method: GET
    iamRoleStatements: # Identity & Access Managment
      - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
      Resource: !GetAtt ProductsTable.Arn

  createProduct:
    handler: api.createProduct
    name: anon-create-product
    memorySize: 128 # mb
    timeout: 5 # sec
    events: 
      - http:
        path: anon-product
        method: POST
    iamRoleStatements: # Identity & Access Managment
      - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
      Resource: !GetAtt ProductsTable.Arn

  updateProduct:
    handler: api.updateProduct
    name: anon-update-product
    memorySize: 128 # mb
    timeout: 5 # sec
    events: 
      - http:
        path: anon-product/{productId}
        method: PUT
    iamRoleStatements: # Identity & Access Managment
      - Effect: "Allow"
      Action:
        - "dynamodb:UpdateItem"
      Resource: !GetAtt ProductsTable.Arn

  deleteProduct:
    handler: api.deleteProduct
    name: anon-delete-product
    memorySize: 128 # mb
    timeout: 5 # sec
    events: 
      - http:
        path: anon-product/{productId}
        method: DELETE
    iamRoleStatements: # Identity & Access Managment
      - Effect: "Allow"
      Action:
        - "dynamodb:DeleteItem"
      Resource: !GetAtt ProductsTable.Arn

  getAllProducts:
    handler: api.getAllProducts
    name: anon-get-all-products
    memorySize: 128 # mb
    timeout: 5 # sec
    events: 
      - http:
        path: anon-products
        method: GET
    iamRoleStatements: # Identity & Access Managment
      - Effect: "Allow"
      Action:
        - "dynamodb:Scan"
      Resource: !GetAtt ProductsTable.Arn

resources:
  Resources:
    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.postsTableName}
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    DynamoTableItems:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName:${self:custom.productsTableName} # Referencing this file, the tableName.
        AttributeDefinitions:
          - AttributeName: ID # Because it's an array we use the (-).
            AttributeType: S # For string.
        KeySchema:
          - AttributeName: ID
            KeyType: HASH # Tells dynamo exactly what type of format these attributes are in.
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
      # BillingMode: PAY_PER_REQUEST # Makes it so that we only have to pay for what we use.
      # bool IAMPOORBOI = 1;